module shift_reg( out, clk, reset, in, trigger);

  parameter WIDTH = 8;

  output [WIDTH-1 : 0] out;
  input               clk, reset,trigger;
  input  [WIDTH-1 : 0] in;

  reg [WIDTH-1 : 0] out;
  wire [WIDTH-1 : 0] in;
  reg [WIDTH-1 : 0] nxt_out;
  reg first_parse;
  reg nxt_first_parse;
  wire  trigger,clk, reset;
  
//combo

  always @(*)
  begin
//default
    nxt_first_parse = first_parse;
    nxt_out         = out;
  
    if(first_parse)
    begin 
      nxt_out [WIDTH-1 : 0] = in [WIDTH-1 : 0];
    end
  
    if(trigger)
    begin 
      out = {out [WIDTH-2:0],1'b0};
      nxt_first_parse = 0;
    end
  end

//seq
  
  always @(posedge clk, negedge reset)
  begin
    if (!reset)
     begin
      out <= 8'b0;
      first_parse <= 1'b1;
     end
    else
    begin
      out <= nxt_out;
      first_parse <= nxt_first_parse;
    end
  end
endmodule